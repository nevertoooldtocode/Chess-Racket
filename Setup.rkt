#lang racket

(require "Mechanics.rkt")

(provide (all-defined-out))

(define a1 (make-object square% 1 2))
(define a2 (new square% [col 1] [row 3]))
(define a3 (new square% [col 1] [row 4]))
(define a4 (new square% [col 1] [row 5]))
(define a5 (new square% [col 1] [row 6]))
(define a6 (new square% [col 1] [row 7]))
(define a7 (new square% [col 1] [row 8]))
(define a8 (new square% [col 1] [row 9]))

(define b1 (new square% [col 2] [row 2]))
(define b2 (new square% [col 2] [row 3]))
(define b3 (new square% [col 2] [row 4]))
(define b4 (new square% [col 2] [row 5]))
(define b5 (new square% [col 2] [row 6]))
(define b6 (new square% [col 2] [row 7]))
(define b7 (new square% [col 2] [row 8]))
(define b8 (new square% [col 2] [row 9]))

(define c1 (new square% [col 3] [row 2]))
(define c2 (new square% [col 3] [row 3]))
(define c3 (new square% [col 3] [row 4]))
(define c4 (new square% [col 3] [row 5]))
(define c5 (new square% [col 3] [row 6]))
(define c6 (new square% [col 3] [row 7]))
(define c7 (new square% [col 3] [row 8]))
(define c8 (new square% [col 3] [row 9]))

(define d1 (new square% [col 4] [row 2]))
(define d2 (new square% [col 4] [row 3]))
(define d3 (new square% [col 4] [row 4]))
(define d4 (new square% [col 4] [row 5]))
(define d5 (new square% [col 4] [row 6]))
(define d6 (new square% [col 4] [row 7]))
(define d7 (new square% [col 4] [row 8]))
(define d8 (new square% [col 4] [row 9]))

(define e1 (new square% [col 5] [row 2]))
(define e2 (new square% [col 5] [row 3]))
(define e3 (new square% [col 5] [row 4]))
(define e4 (new square% [col 5] [row 5]))
(define e5 (new square% [col 5] [row 6]))
(define e6 (new square% [col 5] [row 7]))
(define e7 (new square% [col 5] [row 8]))
(define e8 (new square% [col 5] [row 9]))

(define f1 (new square% [col 6] [row 2]))
(define f2 (new square% [col 6] [row 3]))
(define f3 (new square% [col 6] [row 4]))
(define f4 (new square% [col 6] [row 5]))
(define f5 (new square% [col 6] [row 6]))
(define f6 (new square% [col 6] [row 7]))
(define f7 (new square% [col 6] [row 8]))
(define f8 (new square% [col 6] [row 9]))

(define g1 (new square% [col 7] [row 2]))
(define g2 (new square% [col 7] [row 3]))
(define g3 (new square% [col 7] [row 4]))
(define g4 (new square% [col 7] [row 5]))
(define g5 (new square% [col 7] [row 6]))
(define g6 (new square% [col 7] [row 7]))
(define g7 (new square% [col 7] [row 8]))
(define g8 (new square% [col 7] [row 9]))

(define h1 (new square% [col 8] [row 2]))
(define h2 (new square% [col 8] [row 3]))
(define h3 (new square% [col 8] [row 4]))
(define h4 (new square% [col 8] [row 5]))
(define h5 (new square% [col 8] [row 6]))
(define h6 (new square% [col 8] [row 7]))
(define h7 (new square% [col 8] [row 8]))
(define h8 (new square% [col 8] [row 9]))

(define STARTPIECES
  (list (make-object piece% 'pawn 'white a2) (make-object piece% 'pawn 'white b2)
        (make-object piece% 'pawn 'white c2) (make-object piece% 'pawn 'white d2)
        (make-object piece% 'pawn 'white e2) (make-object piece% 'pawn 'white f2)
        (make-object piece% 'pawn 'white g2) (make-object piece% 'pawn 'white h2)
        (make-object piece% 'rook 'white a1) (make-object piece% 'knight 'white b1)
        (make-object piece% 'bishop 'white c1) (make-object piece% 'queen 'white d1)
        (make-object piece% 'king 'white e1) (make-object piece% 'bishop 'white f1)
        (make-object piece% 'knight 'white g1) (make-object piece% 'rook 'white h1)
        (make-object piece% 'pawn 'black a7) (make-object piece% 'pawn 'black b7)
        (make-object piece% 'pawn 'black c7) (make-object piece% 'pawn 'black d7)
        (make-object piece% 'pawn 'black e7) (make-object piece% 'pawn 'black f7)
        (make-object piece% 'pawn 'black g7) (make-object piece% 'pawn 'black h7)
        (make-object piece% 'rook 'black a8) (make-object piece% 'knight 'black b8)
        (make-object piece% 'bishop 'black c8) (make-object piece% 'queen 'black d8)
        (make-object piece% 'king 'black e8) (make-object piece% 'bishop 'black f8)
        (make-object piece% 'knight 'black g8) (make-object piece% 'rook 'black h8)))

(define STARTPOSITION
  (make-object position% STARTPIECES 'white))

; Test

(define e2-e4 (make-object move% e2 e4))
(define e7-e5 (make-object move% e7 e5))
(define after-e2-e4 (send STARTPOSITION changed-pos e2-e4))
(define after-e7-e5 (send after-e2-e4 changed-pos e7-e5))
;(changed-pos STARTPOSITION e2-e4)
;(make-board STARTPOSITION)
;(display-board STARTPOSITION)
;(display-board (changed-pos STARTPOSITION e2-e4))

;(possible-moves STARTPOSITION)

;(legal-moves STARTPOSITION)
;(legal-moves after-e2-e4)
;(legal-moves after-e7-e5)